generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model actor {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  birth_date  DateTime? @db.Timestamp(6)
  nationality String?   @db.VarChar(255)
  gender      String?   @db.VarChar(255)
  movie_id    String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  movie       movie     @relation(fields: [movie_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?   @db.VarChar(255)
  established_on DateTime? @db.Timestamp(6)
  industry       String?   @db.VarChar(255)
  location       String?   @db.VarChar(255)
  name           String    @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  user_id        String    @db.Uuid
  tenant_id      String    @db.VarChar(255)
  user           user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  movie          movie[]
}

model director {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  birth_date  DateTime? @db.Timestamp(6)
  nationality String?   @db.VarChar(255)
  gender      String?   @db.VarChar(255)
  movie_id    String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  movie       movie     @relation(fields: [movie_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model movie {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String     @db.VarChar(255)
  movie_director String?    @db.VarChar(255)
  release_date   DateTime?  @db.Timestamp(6)
  genre          String?    @db.VarChar(255)
  company_id     String     @db.Uuid
  rating         Int?
  created_at     DateTime   @default(now()) @db.Timestamp(6)
  updated_at     DateTime   @default(now()) @db.Timestamp(6)
  actor          actor[]
  director       director[]
  company        company    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review         review[]
}

model review {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String    @db.VarChar(255)
  rating      Int?
  user_id     String    @db.Uuid
  movie_id    String    @db.Uuid
  review_date DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  movie       movie     @relation(fields: [movie_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  company     company[]
  review      review[]
}
